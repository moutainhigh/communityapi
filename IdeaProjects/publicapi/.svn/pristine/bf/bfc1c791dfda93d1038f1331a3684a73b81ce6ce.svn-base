<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
                http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/rabbit
                http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd">
                
  <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">            
        <!-- 核心线程数，默认为1 -->            
        <property name="corePoolSize" value="20" />            
        <!-- 最大线程数，默认为Integer.MAX_VALUE -->            
        <property name="maxPoolSize" value="100" />            
        <!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE -->            
        <property name="queueCapacity" value="2000" />            
        <!-- 线程池维护线程所允许的空闲时间，默认为60s -->            
        <property name="keepAliveSeconds" value="300" />            
        <!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->            
        <property name="rejectedExecutionHandler">            
            <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->            
            <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->            
            <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->            
            <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->            
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />            
        </property>            
    </bean>  
    <!-- 连接服务配置   192.168.31.204-->  
    <rabbit:connection-factory id="connectionFactory" host="${rabbitmq_url}" username="${rabbitmq_username}"  
    password="${rabbitmq_password}"/>   <!--  port="15672"--> 
    <rabbit:admin connection-factory="connectionFactory" />  
  
    <!-- queue 队列声明 需要发送消息到哪些队列-->  
    <!-- 消息系统监听队列如果没有name将监听该转换器所有队列-->
    <rabbit:queue id="message_queue" durable="true" auto-delete="false" 
    			  exclusive="false" name="${rabbitmq_queue}"/>  

    <rabbit:queue id="broadcast_Housekeeper_Queue" durable="true" auto-delete="false" 
    			  exclusive="false" name="${broadcast_Housekeeper_Queue}"/>  
    			  
       <rabbit:queue id="login_auxiliary_queue" durable="true" auto-delete="false" 
    			  exclusive="false" name="${login_auxiliary_queue}"/>   			  
      
    <!-- exchange queue binding key 绑定 -->  
    <rabbit:topic-exchange name="${rabbitmq_exchange}" durable="true" auto-delete="false" id="exchange">  
        <rabbit:bindings>  
            <rabbit:binding queue="message_queue" pattern="${pattern}"  />  
        </rabbit:bindings>  
    </rabbit:topic-exchange>  
  
    <!-- spring amqp默认的是jackson 的一个插件,目的将生产者生产的数据转换为json存入消息队列，由于fastjson的速度快于jackson,这里替换为fastjson的一个实现 -->  
    <bean id="jsonMessageConverter"  class="net.okdi.core.common.FastJsonMessageConverter"></bean>  
       
    <!-- spring template声明-->  
    <rabbit:template exchange="${rabbitmq_exchange}" id="amqpTemplate"  connection-factory="connectionFactory"  message-converter="jsonMessageConverter"/>  
      
    <!-- 默认消息处理类，可以重写 -->  
    <bean id="messageHandler" class="net.okdi.core.common.handleMessage.MessageHandler"></bean>  
    <bean id="housekeeperHandler" class="net.okdi.core.common.handleMessage.housekeeperHandler"></bean>  
    <bean id="loginHandler" class="net.okdi.core.common.handleMessage.LoginHandler"></bean>  
      
    <!-- 用于消息的监听的代理类MessageListenerAdapter -->    
    <bean id="messageQueueListenerAdapter"    
        class="org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter">    
      	<!-- 监听器 -->
        <constructor-arg ref="messageHandler" />    
        <!-- 监听器默认执行的方法 -->
        <property name="defaultListenerMethod" value="handleMessage"></property>  
        <!-- 监听容器 --> 
        <property name="messageConverter" ref="jsonMessageConverter"></property>    
    </bean>   

    <bean id="broadcast_Housekeeper_QueueListenerAdapter"    
        class="org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter">    
      	<!-- 监听器 -->
        <constructor-arg ref="housekeeperHandler" />    
        <!-- 监听器默认执行的方法 -->
        <property name="defaultListenerMethod" value="handleMessage"></property>  
        <!-- 监听容器 --> 
        <property name="messageConverter" ref="jsonMessageConverter"></property>    
    </bean>   

    <bean id="login_auxiliary_QueueListenerAdapter"    
        class="org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter">    
      	<!-- 监听器 -->
        <constructor-arg ref="loginHandler" />    
        <!-- 监听器默认执行的方法 -->
        <property name="defaultListenerMethod" value="handleMessage"></property>  
        <!-- 监听容器 --> 
        <property name="messageConverter" ref="jsonMessageConverter"></property>    
    </bean>   
      
    <!-- 监听容器 -->  
   <rabbit:listener-container  
        connection-factory="connectionFactory" acknowledge="auto"  
        task-executor="taskExecutor">  
        <rabbit:listener queues="message_queue" ref="messageQueueListenerAdapter" />  
        <rabbit:listener queues="broadcast_Housekeeper_Queue" ref="broadcast_Housekeeper_QueueListenerAdapter" />  
        <rabbit:listener queues="login_auxiliary_queue" ref="login_auxiliary_QueueListenerAdapter" />  
    </rabbit:listener-container>  
    
    
       <!-- 通过rabbitMQ模板来发送消息 -->
        <bean id="messageSenderRabbit"    
                class="net.okdi.core.common.handleMessage.MessageSenderRabbit">    
                <property name="amqpTemplate" ref="amqpTemplate"></property>    
        </bean>  
</beans>